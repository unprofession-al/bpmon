// Code generated by go generate; DO NOT EDIT.

package config

func configDoc(section string) map[string]string {
	doc := make(map[string]string)
	doc[section] = `The default section is - as the name suggests - read by default. Note the '&default'
notation; this is known an an 'anchor' and allows you to reuse the settings
in other sections...`
	doc[section+".annotate"] = ``
	doc[section+".annotate.listener"] = ``
	doc[section+".annotate.static"] = ``
	doc[section+".availabilities"] = `Define your office hours et al. according to your service level
agreements (SLA). You can later reference them in your BP definitions.
`
	doc[section+".checker"] = `First BPMON needs to have access to your Icinga2 API. Learn more on by reading
https://docs.icinga.com/icinga2/latest/doc/module/icinga2/chapter/icinga2-api.
`
	doc[section+".checker.connection"] = ``
	doc[section+".checker.kind"] = ``
	doc[section+".checker.timeout"] = ``
	doc[section+".checker.tls_skip_verify"] = ``
	doc[section+".dashboard"] = ``
	doc[section+".dashboard.listener"] = ``
	doc[section+".dashboard.static"] = ``
	doc[section+".global_recipient"] = `global_recipient will be added to the repicient list af all BP
`
	doc[section+".health"] = `health ... TODO
`
	doc[section+".health.checker_required"] = ``
	doc[section+".health.id"] = ``
	doc[section+".health.name"] = ``
	doc[section+".health.responsible"] = ``
	doc[section+".health.store_required"] = ``
	doc[section+".health.template"] = ``
	doc[section+".rules"] = `Extend the default rules; in that case: Do not run the alarming command
if a critical service is aready aknowledged to avoid alarm spamming.
`
	doc[section+".store"] = `Also the connection to the InfluxDB is required in order to persist the
state for reporting and such
`
	doc[section+".store.connection"] = ``
	doc[section+".store.debug"] = ``
	doc[section+".store.get_last_status"] = ``
	doc[section+".store.kind"] = ``
	doc[section+".store.save_ok"] = ``
	doc[section+".store.timeout"] = ``
	doc[section+".store.tls_skip_verify"] = ``
	doc[section+".trigger"] = `If a service is failed, this command (rendered as a golang template) is
printed to the stdout. This allows to easily wrap BPMON into an eval
statement in your shell script.
`
	doc[section+".trigger.template"] = ``
	return doc
}
