// Code generated by "esc -o static.go -pkg annotate -prefix static static"; DO NOT EDIT.

package annotate

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/index.html": {
		local:   "static/index.html",
		size:    2925,
		modtime: 1514392309,
		compressed: `
H4sIAAAAAAAC/5xWX2/cRBB/z6dYFrlNpNpOKRKQ2EahhDeSAOEBIRTN2XP2NOtdd3fu0hPiu6P1n5wv
sS/XvtzZO7/5/5vxJl/9fP3+9q+bS1FxrbKjxP8JBbpMJWrpDxCK7EgIIZIaGURegXXIqfzz9pfwezkW
aagxlWvCh8ZYliI3mlFzKh+o4CotcE05hu3LG0GamECFLgeF6dvodDDFxAqzn25+vb4SF1obBsYk7k47
hCJ9LyyqVFJutBSVxWUqwTlkFy9h7U8jyo0UvGkwlVRDifGnsEWPbXSKFXPjzuJ4aTS7qDSmVAgNuSg3
dZw79+MSalKb9HezMGzOvj09ffPd6ansInC8UegqRJbPohvJ+kgYP7E3+STm3NS10ZEXfIGRFtErJ3HX
r2Rhik12lBS0FrkC51LpuwGk0Q4+RjKv5AXPz0LSW5VptdBhzmS0ULjkEfIpWpnSPBG3EKrLHiJaTEh1
KYWz+WN9Fo0vT6NLKUCxbzvpEmqT30/Zcw3o7JVeuOZcXFxdXd9e3F4mcXu6G1tc0HqU2JPX+TwtldV0
oh3hsSCGhfKtsiuUgxXSzYpF+xv2BRdUpPLjivL7O+ioTp7QBTCEjYIcK6MKtKn8zWOGcSCjo0hm8/F3
j/3BttnemTc9001loCBfY48bXnYo4ZqeDTsORs4Hl4nLLTU8JqxfLJ1pv0H4bmmhxjuuGzXBx1YokiB1
fvqDTIqW5P0mOfOSglyjYHODNkfNQRac93VjYxRTk75OgrR/DrLXfU07dCqTIG0GzV7PMdhO0j4F2WOF
k7hL56XEcI2a51JqhaIBjT06CVIqvJfJZpBeGtHqHDpeTDU6hrqZmokgfRQHXzoFDKU7IKRALI0Vx2uw
gqEUpAWfiH9FsCdyKGdihjLI2nneQhcLLGTWSv9mKP8JsgNmuw/sv3EUezLdTXKxYjbaTY99G5zRuaL8
vh/l4aN1/Orrdz+c921un08ed0FnU7R4me1MN07ms+vHVebhsiA29mUnMpszvKcC220UYutnh7OjZXU3
iPsB7cfyTGij8XwPXZ95CNlMUvflxToy1e1Yi+VKwWzMUwv2xpo1FSi2KOGnW1RoMZrYtnMk25vhwjCb
eu6btW1vRQUe2t6BQ+9B56imuDPhAA6mqMz+QF183udzfm2OP+ofPq7QbsJ30TfR26gmHX1wvsqDzpSK
v6HBAzpTYwhKHaDBWDcKmHR5ALi/hu0B1jAXZ+bvs8cn5+Ok4/4SFnd366P/AwAA//89qLyubQsAAA==
`,
	},

	"/main.js": {
		local:   "static/main.js",
		size:    3058,
		modtime: 1514385187,
		compressed: `
H4sIAAAAAAAC/+xWUW/bNhB+96840MZMzS7tdtgenCpFsfShQ9F0S/o0DAErni0u8lETKTta6/8+kLIM
SVEGDxgKDJheLPHuvvvu9N1Z65ISpw1BZqT60ZTkuJKVjeDzCABgIjbofrq5fs/ZQuZ6sXu++JQvcIfk
7KvEu39TSNpgzGAGPnAODSJX0skGJ2BxNg4hLBKp22a1w0WwH6KL0WE06rB5E7Jwq//EOZxNyrsHNv4G
ZsDOJ5hqhTe5JsKCH3n5S68huEIcwxK+fIHmgcosaz+XpHCtCVUb9Fj5S6V3kGTS2nhKxum1TmSoNJdE
mE0v3xsoSRIZJx0qqKuBtSlJCSFeLpTeXfrGaYU8EjLPkdSt4Wxce7JIrKXCt8T9j6YW/wNgZrFHaScL
CC8DYlhedExrUwD39nusQBP029RcIXw2u3hk8LE1C4iB11ku4bsIXsEPyyWs4Pn3S/i2jh+ONrnvjYV4
IK2/lKxWwKjcYqETNocKZdE52Bpy6QqYTU3h2PwskNSUHuTFM6U32nkQTaXDzpHFxJBqHT1CPgxXpKRD
iIFwD1fSYRDUr/dY/Sac3qJ1cptHT0feuELTBmIIT8KZdyaRGd7q7dHEmcJnScrmTeui0SBYEItvq1Yr
/37ncEq/amWagwuPDUW5sYdBvFq9EIPb5hlnAf7O37N5nWugqAmvo4bE7HP+jZRDg0fdu/7q+KPUyf3r
4yBxfRpGT3eL1sqNfxETPh0Hz7vjzGlD00g4fHDN7Pu5PwaIDGmTutMGOOHEwFjvYHALhJGvOPvZp4TX
p5Rwiw8OnIEgVCEEaxZif2gnQv4uH3h3HlyVe31+uL657Ym8LLIVPF6PC78Gter6+qavmhK6JlsmCVq7
6i3Nz4NiKIvsKPGPv7zje03K7EVm6kUn0gLXT0q88rNeFpmwKIsk/SALubV+zXPmjWwgsPeHNaSz6Xg6
06qW03XpOLOZ2bOn9dT0vqMneY6UfJ7Z9Otq6X8V/YdUZFOzf6O0MwWv92JLSlpBDGzMZsEyYy0Z3WGI
YTXkxGtQ5LJAcjwSa02KM/GpdM5Q8wXgGb5YLqN2hM20wiuzJ97blX4BfxVWb2mY1Md8gJJC+pdIJdZy
prTNM1mxOTAyhKyXsECvgSvpJG9nOluG/0h63jl8mD7l7I2N86A2h7+MuyVp0u5UTLs+7/ZXAAAA//+x
b7fB8gsAAA==
`,
	},

	"/style.css": {
		local:   "static/style.css",
		size:    637,
		modtime: 1514384505,
		compressed: `
H4sIAAAAAAAC/4yO0WrDMAxF3/MVgjHYHhJS2JP7NUqs1MaeFBQ3XRn797HGpXiFJI++vvfoNJYS+jjB
dwUAYP00RrwaYGE6Vj9V1fQONeXvi7fJGTi07evxFjjyJ5cMfLTj15L0kVANdJLcEnTYh5PKmW3dSxQ1
8EKU2WH0EzQ4o4/Y+ejTFYp7d/zhhn/YNIPiJz2V7lZDFEwGIg2pWEnIk2enGfWtriUs77rTP+b7v7Vx
MpPuZVjUUBJ4U4BXDXinAq84nDmwXHiDkFsrLrmxy6ekPZx+AwAA//8NGTqTfQIAAA==
`,
	},

	"/": {
		isDir: true,
		local: "static",
	},
}
