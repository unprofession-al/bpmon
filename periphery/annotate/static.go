// Code generated by "esc -o static.go -pkg annotate -prefix static static"; DO NOT EDIT.

package annotate

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/index.html": {
		local:   "static/index.html",
		size:    2745,
		modtime: 1514985147,
		compressed: `
H4sIAAAAAAAC/5xWbW/jRBD+nPyKZVFOrXS2exwS0NpG5SjfaAuUDwihamJP7Lnui887SS9C/He0fknt
xCkRX1rv7jMvO/M8k42/+PHuw8Mf9zeiZK3Seez/CQWmSCQa6TcQ8nQuhBCxRgaRlVA75ET+/vBT8K0c
HhnQmMgN4XNla5Yis4bRcCKfKecyyXFDGQbN4q0gQ0ygApeBwuRdeNG7YmKF6Q/3P9/dimtjLANjHLW7
LUKReRI1qkRSZo0UZY2rRIJzyC5awcbvhpRZKXhbYSJJQ4HR56BBD320hiVz5S6jaGUNu7CwtlAIFbkw
szrKnPt+BZrUNvnVLi3by68vLt5+c3Eh2wwcbxW6EpHlQXaDsy4Txs/sXe7lnFmtrQn9wf9w0iA64zhq
+xUvbb5N53FOG5EpcC6RvhtABus+xuDMG/mDw72AzIvJtFngMGOyRihc8QC5j1a2sHvHDYR00UFEgwlI
F1K4OtvVZ1n58lSmkAIU+7aTKUDb7GnKn6vApG/M0lVX4vr29u7h+uEmjprdcW5RTpvBxfaWx+9ZU1FO
X7QlPObEsFS+VfUaZe+FTLVm0fwNuoILyhP5aU3Z0yO0VCdP6BwYgkpBhqVVOdaJ/MVjejmQNWEo0+P5
t5/dxkuzfTDv+kg3lYWcfI09rl+MKOGqjg2jAIPgfcjYZTVVPCSsHyyta9yg4UfWlZpgYgUGO1y8SChf
pDKdz2YHkKCr9eAuIxCZlRVNpNfoOTJh0ugYdDVBqlm8SHbni30n40YcrodBoHCn5LUQK1uLsw3UgqEQ
ZASfi7/FIp3PjumLoejcjCGLhKFYpPEybb7/ZCj+WqRxtBykOCGAPo9/RkEHoNl+AuNrLdfM1rgDtcx2
IhXWZIqyp04C/bA/e/Pl+++uuu433+c7DbVORYOX6UgVOKXx2V4gV9rnm5zY1v8dRab7nk+qwouQA2wi
jdg80Pljf9wM8ETm5CoF20thrMGrg4q9FiJgu8/a2YlTaeCrHVA1FmsFR7Oemk73td1QjuIFJbzmRYk1
hhOjakolB0o5vOTSMls9qc5xl0vK8dQu91z6ACZDNcWhqQhwMldl+huafJqbx+dG/z3bDdZ2og5m6/AH
8uOnNdbb4H34Vfgu1GTCj84XvbeZMvGvHXhGZzUGoNQJFoy6UsBkihPA3ZPmFaCGY3mm/m14dn41vHTU
PWii9p06/zcAAP//njVCFbkKAAA=
`,
	},

	"/main.js": {
		local:   "static/main.js",
		size:    3063,
		modtime: 1514985125,
		compressed: `
H4sIAAAAAAAC/+xW32/bNhB+919xYIyZml3a2bA92FWKYulDh6LplvRpGAJWPFtc5KMmUna8Nv/7QEpy
JUUuMmAoMGB6SCTej++703dnrUtKnDYEmZHqJ1OS40oebAQfRwAA8/lYbND9fH31lrO5zPV8dz7/kM9x
h+Tsi8QHfFNI2mDMYAo+dAZNTq6kk58z+b9jzs5CEItE6rZZ5bKqPR6i1ehhNOpwehWQuNV/4Qza1L5I
zLsHRv4GpsCeRtJfqVZ4nWsiLHjNzF96DcEV4hgW8OkTNA9UZln7uSSFa02o2knr2p8rvYMkk9bGEzJO
r3UiQ6W5JMJscvHWQEmSyDjpUEFVDaxNSUoI8Xyu9O7Ct04r5JGQeY6kbgxnZ5Uni8RaKnxN3P/T1OL/
AJhZ7FHayQLC64AYFquOaW0K4N5+hwfQBP02NVcIn05Xjww+tmIBMfAK5QK+j+AF/LhYwBLOf1jAt1X8
cLTJfW8sxAOw/lLysARG5RYLnbAZHFAWnYOtIZcugdnUFI7NnpQkNaVP8t0zpTfa+SSaSoedI4uJIdU6
epT5YbgiJR1CDIR7uJQOg6B+u8PD78LpLUang65doWkDMYQn4cwbk8gMb/S2NnGm8FmSslnTtWg1GswW
hOJbqtUSPuNrNQPPwTq5zZctzBm4tp+TG3uiuFwSZhCD2+YZZwHn1t+zWQU6xGjMQ9SQoj3mF/Qcujzq
3vX3x5+lTu5e1tPE9XEiPdstWis3/m2M+eQseN7Wg6cNTSLh8N41C8APfx0gMqRN6o5r4JgnBsZ6B4Or
IMz9gbNfPCS8PELCDd47cAaCWoUQrAZ/NLljIf+Q97w7FO6Qe5G+u7q+6Sm9LLIlPN6Rc78Lter6+qYv
mxK6JlsmCVq77G3Oj4NaKIus1vn7X9/wvSZl9iIz1bYTaYHrk2I/+IEvi0xYlEWSvpOF3Fq/6znzRjYQ
2PvtWg3IbHI2mWpVyemqdPx8sTgtpqbxHTHJp+jIg0wnX1dI/0vovyIhm5r9K6WdKXi1EVs60gpiYGds
GixT1tLQLYYYVqUcewGKXBZIjkdirUlxJj6UzhlqPgC69KoIm2mFl2ZPvLcl/er9Kqxe0zCp9/kAJYX0
L5FKrOVMaZtn8sBmwMgQsh5ggV4Al9JJ3kZ6sgb/ke68c/guPeXsjY3zoDCHP4y7JWnS7lhMuz7v9ncA
AAD//0MVDnz3CwAA
`,
	},

	"/style.css": {
		local:   "static/style.css",
		size:    1091,
		modtime: 1514985026,
		compressed: `
H4sIAAAAAAAC/4xS7W7bMAz8n6cgMAzYgjm1M3RtlKehLNoWqpKaTC/phr37UH9kjmcD08+jyDse7+C5
ki9wUKxb+LUDAJAflKogFwONd4743KMRnfNcZ8nXjRoo8ni9L6hEA8VxCVtRldep8nu36xlHqot32hgo
nvKpaDtV4fa+fnxc1A/fO1++jJ8sli91ko5dVkqQZOCDs/j49Dx0ILMoqhfOyHmVNLaVgTAZsKLNoLgK
gmogUKUrmx1vC0+i8/zjAChdNcPgazZQEiulAX/YW0mOkoEiXqGV4B3Y0NF5/7Cu7J1p4cyN5E7uevdg
9X8NmO3bH/TfRWbwig8LAZ5jpyNxQ0NCjsuEDKGZRWRwJ0vofNca+Dbhcxl/r3FpvFLWRizJAMslYTxv
5HVVnZ0O73wbA74ZFqaNv/vFV8/Bv39e6phkrA05JKq7gGk7pVi5osSN7nnCx1t+zW+Wrkyr+rc+zdBr
1DdjqZJEU/7HvtPpNOZBWLPW/yQDz7fQCCuxGkDV9MmhYhYDltRIcJQ+92x/AgAA//998gv9QwQAAA==
`,
	},

	"/": {
		isDir: true,
		local: "static",
	},
}
