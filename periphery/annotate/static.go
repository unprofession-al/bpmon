// Code generated by "esc -o static.go -pkg annotate -prefix static static"; DO NOT EDIT.

package annotate

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/index.html": {
		local:   "static/index.html",
		size:    2807,
		modtime: 1515496447,
		compressed: `
H4sIAAAAAAAC/5xWX2/jRBB/Tj7FsiinVjrbPQ4JaG2jcpQ32gLlASFUje2JPdf1rs87SS9CfHe0/tPY
jlMiXpLdnd/82Zn5jTf84se7Dw9/3N+IgksVL0P3JxToPJKopTtAyOKlEEKEJTKItIDaIkfy94efvG/l
UKShxEhuCZ8rU7MUqdGMmiP5TBkXUYZbStFrNm8FaWIC5dkUFEbv/IveFBMrjH+4//nuVlxrbRgYw6A9
bRGK9JOoUUWSUqOlKGpcRxKsRbbBGrbu1KfUSMG7CiNJJeQYfPYa9NBGq1gwV/YyCNZGs/VzY3KFUJH1
U1MGqbXfr6EktYt+NYlhc/n1xcXbby4uZBuB5Z1CWyCyPIhuIOsiYfzMzuQk5tSUpdG+E/wPIw2iUw6D
tl5hYrJdvAwz2opUgbWRdNUA0lj3PgYyp+QEh2ce6b3KvJpnMWUyWihc8wA5RSuTm4m4gVCZdxDRYDwq
cylsnb7kJ6lceiqdSwGKIzlujjmbtgLd+00gy1EKylwONppl7Pt+GDjIEc34jU5sdSWub2/vHq4fbubA
YZDRdpCWyfZ4lmrKi/k0tXTBjBgS5Qpdb1D2VkhXGxbNr9eVq7nSpw2lT4/Q5oIcHTJg8CoFKRZGZVhH
8heH6fNFRvu+jI/H3y67g32rOGfO9JFeUAYychVyuH4zaihbdb00cjBw3rsMbVpTxcN2d2OpNY1b1PzI
ZaVm+rgCjR0uXEWUrWIZLxeLA4jX5XpwlxGI9NqIxtNrzT1SYSrRMpTVTDsuwlX0Il9NjYwLcbgfOoHc
nhLXSqxNLc62UAuGXJAWfC7+Fqt4uTjGToa8MzOGrCKGfBWHSdys/2TI/1rFYZAMQpwhQB/HPyOnA9Bi
GsD4WsmG2Wh7wJbFnt5Gp4rSp44C/TQ4e/Pl+++uuuo36/MXDrVGRYOX8YgVOMfxxcSRLczzTUZs6v/2
IuOp5ZOysCeyh42nUTcPeP7Yi5vxH8mMbKVgdym00Xh1kLHXXHhspl27OHEqDWy1A6rGfKPgaNRz0+m+
NlvKUOxRwnFeFFijPzOq5lhywJTDSyaG2ZSz7BxXuaAMT61y30sfQKeojn1Uph7g5F6V8W+os/nePD43
+vXiZbC2E3UwW4ef14+fNljvvPf+V/47vyTtf7Qu6b3OnIp7K8EzWlOiB0qdoMFYVgqYdH4CuHsQvQIs
4VicsXtZnp1fDS8ddM+hoH3lLv8NAAD//7ho6+L3CgAA
`,
	},

	"/main.js": {
		local:   "static/main.js",
		size:    2948,
		modtime: 1515496447,
		compressed: `
H4sIAAAAAAAC/+xWXW/bNhR996+4YAyYml3a2bA9OFWGYulDh6LplvRpGAJWvLa5yJeaSNnxWv/34VKW
JzvykA1DgAHViyXej3NInXvkWUVZsI4gd9q8XiEFLxP41AMA6Ks5hh9vrt9JMdaFHa/Oxx+LMcYkAUNY
WzJurXKXaW6hPOoyW4yg6SmNDrppxtfCGrwpLBGWMrnYL9sZxFRIU5jA58+we0iBqjw/WKjI4MwSmnbb
yFWKl8auIMu19+mAXLAzW/OCQhPmg8t3DirSRC7ogAbqfcDMVWSUUi/Hxq4uRaKYpEyULgokc+ukOGN0
kaiZNviGJP9YatHfwZ9lrqLADcIyl2IiWilbwNzjEeWVLiHWQAqTw3YzV4Lk+D1uwBIcH2RzxfLh8OJR
gGtropCCrFEu4ZsEvofvJhOYwvm3E/iqru+udgWfnYe0A5YvozdTEFQtsbSZGMEGdXmwsHQUFlMQfuHK
IEZParJwFTf5+oWxcxu4iaUq4MGSx8yRaS096rzt3pHRASEFwjVc6YBRcr/c4+ZXFewSk9NFN6G0NIcU
4pMK7q3LdI63drkLSWHwRbYQo+bUkoteZ7eoOT5Sa6bwF741I2AOPuhlMW1hjiC084Ke+xObixqHFMKy
yKWIOHd8L0Y1aBejvoxV/1Ly278fgPjQHoF4t00uetteb+86v1c2u3+1m0lp92PNW1qi93rOr6wvB2cx
8243vtbRIFEBH0LjI+whuwKVI80XYe8m+z4pCHG00Okn0Tw2UvzEkPBqDwm3+BAgOIiSVko1I/5ovPtK
/6Yf5OHkhE3BSn5/fXN7NA5VmU/hsceO2WStOczlNzNttnAY8lWWoffTIwP+1CmYqsx3w/Dh57fy2MoX
Jc5OTsSGXaEq853hv9elXnr+VkjBQdFRyF+XH1gRkjM6EvgVD4bW1Jq7roI8n0xOKm7bHPyBmPRTdMQg
w8HzCumLhP4vEvILt35tbHClrG2zpSNrIAVxJoYxMhQtDd1hrBF1yz4LUBW6RAoyUTNLRgr1sQrBkRdd
9OoKn1uDV25N8sgl2Z+fhdUb6ib1oeigZJD+I1KZ91IY64tcb8QIBDlCcQRYIgvgSgct20hP1uA/0h0n
e/sHnkzmYJPc+ufMyyPY6bPN3pINe97trXDanwEAAP//R4mb3IQLAAA=
`,
	},

	"/style.css": {
		local:   "static/style.css",
		size:    1091,
		modtime: 1515496447,
		compressed: `
H4sIAAAAAAAC/4xS7W7bMAz8n6cgMAzYgjm1M3RtlKehLNoWqpKaTC/phr37UH9kjmcD08+jyDse7+C5
ki9wUKxb+LUDAJAflKogFwONd4743KMRnfNcZ8nXjRoo8ni9L6hEA8VxCVtRldep8nu36xlHqot32hgo
nvKpaDtV4fa+fnxc1A/fO1++jJ8sli91ko5dVkqQZOCDs/j49Dx0ILMoqhfOyHmVNLaVgTAZsKLNoLgK
gmogUKUrmx1vC0+i8/zjAChdNcPgazZQEiulAX/YW0mOkoEiXqGV4B3Y0NF5/7Cu7J1p4cyN5E7uevdg
9X8NmO3bH/TfRWbwig8LAZ5jpyNxQ0NCjsuEDKGZRWRwJ0vofNca+Dbhcxl/r3FpvFLWRizJAMslYTxv
5HVVnZ0O73wbA74ZFqaNv/vFV8/Bv39e6phkrA05JKq7gGk7pVi5osSN7nnCx1t+zW+Wrkyr+rc+zdBr
1DdjqZJEU/7HvtPpNOZBWLPW/yQDz7fQCCuxGkDV9MmhYhYDltRIcJQ+92x/AgAA//998gv9QwQAAA==
`,
	},

	"/": {
		isDir: true,
		local: "static",
	},
}
