// Code generated by "esc -o static.go -pkg annotate -prefix static static"; DO NOT EDIT.

package annotate

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/index.html": {
		local:   "static/index.html",
		size:    2968,
		modtime: 1514466215,
		compressed: `
H4sIAAAAAAAC/5xWX2/jRBB/Tj7Fssh3rXS2exwS0NhG5ShvtAXKA0KomtgTe67rXZ93kl6E+O5o/Se1
E6cX3Uu73vnN/5lfNvrq59v393/dXYuCS5XMI/dPKNB5LFFLd4GQJXMhhIhKZBBpAbVFjuWf97/438uh
SEOJsdwQPlWmZilSoxk1x/KJMi7iDDeUot98vBGkiQmUb1NQGL8NLnpTTKww+enu19sbcaW1YWCMwva2
RSjSj6JGFUtKjZaiqHEVS7AW2YYr2LjbgFIjBW8rjCWVkGP4yW/QQxutYsFc2cswXBnNNsiNyRVCRTZI
TRmm1v64gpLUNv7dLA2by28vLt58d3Eh2wgsbxXaApHlQXQDWRcJ4yd2JvdiTk1ZGh04wRcYaRCdchS2
/YqWJtsm8yijjUgVWBtL1w0gjXXvYyBzSk5weOeTflaZVvMtpkxGC4UrHiD30crkZk/cQKjMO4hoMD6V
uRS2Tnf1WVauPJXOpQDFru2kcyhN+jhlz1agk1d6aauFuLq5ub2/ur+OwuZ2HFuY0WaQ2N7n8Txryovp
RNuBx4wYlsq1ql6j7K2QrtYsmr9+V3BBWSw/ril9fIB21MkNdAYMfqUgxcKoDOtY/uYw/TqQ0UEgk+Px
t8fu4rnZzpkzfaSbykBGrsYO13+MRsJW3TSMHAyc9y4jm9ZU8XBgHbG0ph2D8MOqhhIfuKzUxDw2QhF5
sXXb7yVSNEPeMcmlk2RkKwXbO6xT1Owl3qKrGxujmKr4deTF3dlLXnc1bdGxjLy46jU7PctQt5Lm5CW7
Ckdhm87nEsMNaj6WUiMUFWjs0JEXU+a8zGezIbCB+N0oDVo1ApFeGdGYfGn7RipMJVqGsprYmZmrVS/3
9o2M5+zwe+gEcntKXJ5YmVqcbaAWDLkgLfhc/Cu8ZD47Rh8MeWdmDPFihtxLomXSnP9myP/xkihcDkKc
2O8+jv9GTgeg2WQHd2kt18xG2wMymO04SBidKkofuw3vf8vOXn397odF1/3mfL6jiNaoaPAyGS09TlHY
bM+RLczTdUZs6s97kcm+5ZOq8MxTPjaeRtM8oLGHXtytbrewl0IbjYuDir3kwmezP7WzE0l3YKvl3xrz
tYKjUU+R711tNpSheEYJt/miwBqDCSae2pKDTTlMcmmYTTm5neMuF5ThqV3uZ+k96BTV1AxNeYCTZ1Um
f6DOpmfzOG/059lxhh3+/n/4uMZ6678LvgneBiXp4IN1Re91plTcYw6e0JoSfVDqBA3GslLApPMTwN2L
7QVgCcfiTNzT9+x8MUw67N5rYfsMn/8fAAD//wTmHBWYCwAA
`,
	},

	"/main.js": {
		local:   "static/main.js",
		size:    3139,
		modtime: 1514481719,
		compressed: `
H4sIAAAAAAAC/+xWX2/bthd996e4YIyfqZ9V2tmwPchVimLpgA5F0y3p0zAErHhtcZEvNZKy47X57gMl
y5UcuciAocCA8SGReP+dS557rGVFmdeGoDBS/WAq8lzJnYvg4wgAYDYbixX6n66v3nI2k6Webc5nH8oZ
bpC8e5GFgP9ZSStMGUwhhMbQ5uRKevk5U/g75uysDmKRyP26aFwWe4+HaDF6GI16mF7VlbjTf2IMXWhf
BBbca0ThAabAngYyrFwrvC41EVq+RxaWXkLtCmkKc/j0CdoXqoqi+16RwqUmVN2k+96fK72BrJDOpRMy
Xi91JutOS0mExeTirYGKJJHx0qOCphtYmoqUEOL5TOnNRTg6rZBHQpYlkroxnJ01niwSS6nwNfHwT1MH
/wNg4fAI0kZaqK8DUpgveqalscCD/Q53oAmOj6lddfh0unhkCLENCkiBN1Uu4NsIXsD38zkkcP7dHP7f
xA9HmzKcjYN0oGxYSu4SYFSt0eqMxbBDaXsba0M+T4C53FjP4iclyU0VknzzTOmV9iGJpspjb8thZkh1
th5lfhjuSEmPkALhFi6lx5pQv97h7jfhvLQ+Oh117a2mFaRQvwlv3phMFnij13sTZwqfZTmL22M7layy
DeVS+Fy93RTe/KjvUfF5tBgNhtc8CzeiVRKoEYPXa3RersukAzQGn3Tye7lycSidHOqfOKFmECAFvy4L
zupyt+GZxU3tgbbGvIkamouA4QtTUd/VqP90rEJ/VDq7e7mfSa4Pcx3grtE5uQp3OuaTs9rzdj++2tAk
Eh7vfSsjQUL2AaJAWuX+ICaHPCkwdrQxKCi1euw4+zmUhJeHknCD9x68gZrzQgi2L/5o/sdC/i7veX+0
/K4MVH93dX1zNC+VLRJ4rLSzoKha9X3DoSdtC32Tq7IMnUuO9PfjIBkqW+yn5f0vb/hWkzJbUZhGM0Vu
cXlyYnZBNipbCIfSZvk7aeXahV8MzoKRDQQe/QIO8WxyNplq1dDpqvKcucJs2Wk+tWff45N8CpVCnenk
63LpPxb9i1jkcrN9pbQ3lje62KGSVpACO2PT2jJlHRrdYh3DmpTjwEFRSovkeSSWmhRn4kPlvaH2YyIg
PJ/Po26EK7TCS7MlfqSVQYC/CqrXNAzqfTkASSH9Q6Ay5zhT2pWF3LEYGBlCdlTQYuDApfSSdys9mYZ/
i3rBuf7GPeUcjK3zIDeHP7L7LWnS/tBMt7/g9lcAAAD//4VIF5NDDAAA
`,
	},

	"/style.css": {
		local:   "static/style.css",
		size:    1048,
		modtime: 1514466050,
		compressed: `
H4sIAAAAAAAC/4yS3Y6bQAyF7/MUlqpKbVTYkP5tJk/jYQyMdtaeDqbJtuq7V5uBlBIiLZeHsf3Z55Se
G/kEpWLbw+8NAID8pNQEORnovHPEx4t68k47A/svu3jOSkTnPLdF8m2nBqqbHyrRQLVfylZU5Xn682ez
Ke2gKlz+GHz9NEJYrJ/aJAO7opYgycA7Z/Hr98dcgcyiqF64IOdV0lhWB8JkwIp2eWgTBNVAoEZX4PZX
5nG9ard7nwWlsxYYfMsGamKllPWHrZXkKBmo4hl6Cd6BDQMdtw/rZK+TRrqbIf/hrlfna72pwWzfiye3
i8zklTssADzHQcfBHWWT90uTs+8zl/N1ioTOD72Bb5M+x/jnxqnzSkUfsSYDLKeE8XgnhKt0djLe+T4G
fDEsTHfebhdPPQf/+njJMWGsNSkTtUPAdD+l2LiqxjvV84SPXn7eXU+60q25fOvdDD1HfTGWGkk05X+s
OxwOYx6Etej9LzLweA2NsBKrAVRNHxwqFjFgTZ0ER+njZdrfAAAA//8PVfRgGAQAAA==
`,
	},

	"/": {
		isDir: true,
		local: "static",
	},
}
