// Code generated by "esc -o static.go -pkg dashboard -prefix static static"; DO NOT EDIT.

package dashboard

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/index.html": {
		local:   "static/index.html",
		size:    3678,
		modtime: 1514380703,
		compressed: `
H4sIAAAAAAAC/5wX247btvJ9v4LhgXIBImk3OcA5zUoqkrpBCzTNItk+BEWxGEm0NDFFsuTYG6PovxfU
xZZleeP0xRbnfh8yebR4/8Ptp5sfWU2NzC4S/8ckqCrlQnEPEFBmF4wxljSCgBU1WCco5b/dvg3/z8co
BY1I+QbFvdGWOCu0IqEo5fdYUp2WYoOFCNvDc4YKCUGGrgAp0qvochBFSFJkb27evf+VLcDVuQZbJnEH
7kgkqhWzQqYcC604q61YphycE+TiJWw8NMJCc0ZbI1KODVQi/hK21GMZHWNNZNyrOF5qRS6qtK6kAIMu
KnQTF859v4QG5Tb9oHNN+tV/Ly+f/+/ykncWONpK4WohiB9ZN8L1lpD4Ql7kxOZCN41WkUf8CyEtRc+c
xF3CklyX2+wiKXHDCgnOpdynA1AJO+gY4TyTRxzDQlR7lnm20ImCUCsmxZJGlFNqqSs9Qbck2FQ9CWtp
QmwqzpwtdvHJjQ+PURVnIMmnHVUFjS5Wc/KcAZU9Vrkz14vXH3968/71h0USt9BD2+ISNyPHJsfTflqs
au/oxUF8S6tNqe/VTHjzNZFWrPsLh2B/FFIUxG6xERZUJUYGzMkN+34K7y0YM5vGKelA0vr+CzhiLy/Z
ArZuHI4xlr3Tiupj7G2Njn0SYJnTbAl2T7Ezuv+YRLEV8SgMGe/s7OwSJRLk0teyXQs+mI/KrIm1v0OQ
GJYpX6Ik/10CQWgkFKLWshQ25W9bDFtqy96sHSrhHLuxuhDORVHEs84aFoazae4+e8A+mF6lV3Wi6KWG
En0perrhcNA5zvRNc6BgpHxQmbjCoqFxX/sB3In2k5bulhYacUeNkTP5bpEsCVJHQCLIOGtnQT9xX3lM
ic5I2N4IWwhFQRZc93EkrSWhSZ8kQdp/B9mTPsYddcqTIDUDZ8/nCGyHab+CbHDzIok7d77mGCoS1q6N
7yV34Fr9YhfCdd5OfJ79PKZO4vrFsCd8AY0yRPtNtYfZLKE68x2WxFS3h8Xagpe1A7xWStMIFJMdV8tE
bkLdZD3QE7QV+HQDliFDxQ48fMb+YsGxYcdzi8osCdID3t/xj4iwEY6gMYG3rTyfsew9DTL3bYywi8ic
ysMA9f7/PXYxiUdBSuI+U+eWx8rgUb17eBKkK4NY+orbq9qXzMqgv4Gwfel0HB4YZOxxU4Krr7uBNgjM
jZd3txd9BxtACTlKpC3PoijqR13AeowU+yKc9uMh88lF2HY2P21Dhz93WX1j9+Xm1DQxoIScmHViBrak
ky0zR5ebuQU92azt/Dyi6rJ7lbWmnJHDsxLXQpK4vpqx6nhxfUN6z05zn9tT2ma25wxovPIFAUo3VTOA
H3ZoZfCIs4VlZ0TjYGxMpRwis6/79cDtayg2KcE4fw/QqpBYrFJOuqqkWHS+Pn38n5ffXe9M8Kdn19Pa
xGk6Bql3btvkWu7uIktwbAkhqEqKsLvWJTE+1IBzHTi+xH7+cy3sNnwZvYiuogZV9LkNzMAzx+JfJHAv
nG5ECFKewUGiMRIIVXUGcf/seICwgVN2Zv4B9/TZ9djpuH90xN1j8uKfAAAA//8+MnyDXg4AAA==
`,
	},

	"/main.js": {
		local:   "static/main.js",
		size:    7113,
		modtime: 1514386957,
		compressed: `
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
VIw5HmYJLNeRKS5b838FAAD//zXNpBjJGwAA
`,
	},

	"/style.css": {
		local:   "static/style.css",
		size:    637,
		modtime: 1514380703,
		compressed: `
H4sIAAAAAAAC/4yO0WrDMAxF3/MVgjHYHhJS2JP7NUqs1MaeFBQ3XRn797HGpXiFJI++vvfoNJYS+jjB
dwUAYP00RrwaYGE6Vj9V1fQONeXvi7fJGTi07evxFjjyJ5cMfLTj15L0kVANdJLcEnTYh5PKmW3dSxQ1
8EKU2WH0EzQ4o4/Y+ejTFYp7d/zhhn/YNIPiJz2V7lZDFEwGIg2pWEnIk2enGfWtriUs77rTP+b7v7Vx
MpPuZVjUUBJ4U4BXDXinAq84nDmwXHiDkFsrLrmxy6ekPZx+AwAA//8NGTqTfQIAAA==
`,
	},

	"/": {
		isDir: true,
		local: "static",
	},
}
