// Code generated by "esc -o static.go -pkg dashboard -prefix static static"; DO NOT EDIT.

package dashboard

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/index.html": {
		local:   "static/index.html",
		size:    2675,
		modtime: 1512989853,
		compressed: `
H4sIAAAAAAAC/5xWS2/jNhA+r38FS0CLFqil9AG0SCQukrqL9tAm2G4PPQWUNJZmzVfJcVr/+4KSHMuO
5HV6saWZ+ebxzQzF/IvV/U8f/3r4mbWklVjk8Y8paZqCg+FRALIWC8YYyzWQZFUrfQAq+J8f3y9/5IOK
kBSIu4ff7n9nKxna0kpf51kv7k0Umg1rPawL3hK5cJ1la2sopI21jQLpMKSV1VkVwru11Kh2xQdbWrLX
319dff3D1RVnHlTBA+0UhBaA+NjzqY7RzkHBCf6l6JIPoWUIQCGrrNbWpFHxP5x0FgM4z3qG8tLWO7HI
a3xilZIhFLyyhiQa8PsYI10ERcVL2RLNATINWwaoCK1hCtY0sjy1VraxJ+rOBHUzmLDOZom64Sz46pmf
0kV6nGk4k4oKjhWaRmpbbab8BSeNeGvK4G5Wt3/8cnd/+2GVZ530OLesxqdRYSev83V6bNrpQq0hMAQ1
kixVbJXfAt97QeO2xLrf5UA4w7rga1QUn2tJcumUrKC1qgZf8Pedhq2tZ3fbgAZCYA/eVhBCmqZczFfQ
Pw6CQ7tjuBhmpp/Kyhojy9Fu/3I0FMEN83AUYBR8HzIPlUdH45GNy9y7jltLj2svNTySdmpiIjsly5Mi
kCRIBGfdmBf8H6ypvY4aB74CQ4lIbgbyAklPBe9RnhLxTFGe9fl8LjM0BN5vXezzUWrkxeLNm5xqkScF
oYZAUrtE5BnVI400xpKM6L2q5ybCL81h4/AFK1GeJ8XGIdaxrMn2bRyayFrYlt1Rx0UPicJEsLe6lqG9
6Rdk77F00eHjwfejfJKoZIkKacfFu2FzEjbIFZxZlGPs7EnQ9Z/Pp9DrL93WV7a4dHMzBwo0GGJOGlAn
6c1QXrozZZaua8ehF73gM614Lf+v6MFFfRjIn4py8YG5cRhO/Xayi9DjJQxn+D3M+a9jxFTm3Xk8QQYd
LhQvdX5aMQDFShLkGbXnrW6fT4R52/58mJBOZ5dT/Lqf0HuOtMFbfyc4ER4Tc9FajT/Nn/7egt8tv0u/
Tb9JNZr0U4izs8dMQQi0U5LQNBcYD1ejM4ZazkUVaJC+/OpmXEI2XIyy/oa5+C8AAP//NC/PdHMKAAA=
`,
	},

	"/main.js": {
		local:   "static/main.js",
		size:    5434,
		modtime: 1512989793,
		compressed: `
H4sIAAAAAAAC/+xWUW/bNhB+dn7FVTVgajEkB8UGzIkzYEMHdAW6Yu1bEBi0dLIJySQnUna81v99ICXZ
tE2lSbZhKVA/yeTd8e67j8cvq3iimeDAONMkhE9nAAALluIHyTjHkoSXdqlPUpFUS+Q6jAQnMMhxU8nB
EAYvM1ZoLAdDaIPt4pjfipaQUk1hAn0yeGk/I0k5FoMmtPklgitRYFSIOekTvWAqjDTeaRKGB5FKhAlw
XMMfOH99J49shxCwwIlqDovUQqxJGNVZEm+ObXROl2jzrINmjKckiGbSrAftIZcHbiXqquTwosRIo9LE
mDom2zAyYLZe2/DyzH4UgqY/v1dmfXt2tuvCbrlJrh/NUf/24fd3JIipZPFMqjhwgDYFuoWwDEgN9gRG
8PkztH94VRTu/4qnmDGO6TEMfRJcpWwFSUGVmgy40CxjCbXZ1V27fl2WooT1ghUIBVOa8TnMKsU4KgWy
FAkqhSqKoqs4ZavroIUgolIiTz8KElgaBGGU0RTfcBKoQqzdxm0BC4WeDiWi4homMDrsQiZKIGY/xw0w
Dse47GlWcX1+fnmyYXxNMozDBEh9yjW8CuEn+GE0gjFcfD+C72r/poXH7jMJE/gEM8nSscljCDVxxjab
mxw3t7D1n2yBhQnopSxIMJNT8xGYAOGpQ59Y8y+jWtfjiVCz7PUKuVYkx02Hydv3b3zb27PDr62Xw010
g8a9ZIZzi9j/zelfRFWkwIWGDHWyALTpW14dUxsGbdJwDsHgv+G5xDJBrukclWHV9ml0z8p6oO0I6FC3
1zMBlKa6MkcEFc+5WPPglAtqzXSyIDZYlDEsUhXVfu2ZvV6vl1CFMBo78Xu9fXSRO4HN1qxEml8eel90
efMHuf/Y5c443tVz6v4oKWa0KnRXmD1CZn3rnwJN42DSoN8CllalJdy0MfAMEUN0p+839cm3LtU7tjuZ
3/68fsdDtL7Spja/uW/1HLrriWNY0hxBVSXWl5QpWDHFZgV6jJ3y4QpG0YWvmDi2QNdBpnuwR9GFx3br
WfOFXGgt1TiOE5GiRB4xESezkiaJiCXy+M+/qnzufzLsyDdg4Li5S8MWkXH7MTQ7pR43hNBsiUrTpex6
DZIFLfXuNbD/pta1fRYy76tgDX0zaD+ugqk1cgZSRpU2A8m23XTAc8sNw2wzjI2dGpRzoev5OTlycbZe
1Lw1b2iXyRiCK3Z9Y+buBnUbF9Pbq5hdNxfNnsgs0DvoxmYELqn+2C6QI2zDoZPk2E34lBP1AVxjWVay
KarG3l1swWce8Ht94pp+qQmurfI0ox4v/jfXNyjMdL1t4T4eE7vNe4eEgUBUhnXvquUMS3J6QBhp8Su7
w5S8Cr0EdIuEYEpXlBV0xgqmN614FpV+gpqwQuShSsKcHeeSqWepk00pXlWBCtwK/n1V8VDNYE0kc7Rs
rc9yyXbCNpfsSco2l6y9Rrlkj9O2B9yy/T29OB0q1tGiQ3iaoD2JYtB4FB3tinV7xlr37fs3EDRpmsxB
ZKf695v8/SZ/ffL369Svj1Xpe9nnTscuCXhv9OcjDCGY7saT/delE792UXJY5T+RKH8HAAD//1vuNvY6
FQAA
`,
	},

	"/style.css": {
		local:   "static/style.css",
		size:    849,
		modtime: 1512894207,
		compressed: `
H4sIAAAAAAAC/4yS22rjMBCG7/MUA8vCLsQmTjbrRH0aHUbWYEUy9uTU0ncvPiStSGN6Z+b/vhl5pJyJ
PS4h745q+IS3BQCAjYGzM1LlWICK3rwM5YNsKwoZx0ZAsWouSVVF5ni4Be+LRf7QsaNXFFBsVr9HQDvZ
8gScybDr7T7sC24a/+/er26og1yeJHmpyBNfIWlxMz5PMKa5beUBH6DbIOujZAEeLSdWrCdFSV1XbTwG
k+noYyvgV2m0Lv8neJjj0e7Kcpvwx1CHeA4zzkZt7TpxKOCFOqZQzWiIozP8tXDxhO1z2lpr9/tBYKnu
15XcRp+5JbCZwkYaQ6ESsJv2zG7+3TBeOJOeqvBlzexQmucHK6TSez2SKporcCsCu0w78uZPNObvc1da
U2jZu9+oeMIw45o1brFI5/58hx8BAAD//10uZLNRAwAA
`,
	},

	"/": {
		isDir: true,
		local: "static",
	},
}
