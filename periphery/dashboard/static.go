// Code generated by "esc -o static.go -pkg dashboard -prefix static static"; DO NOT EDIT.

package dashboard

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/index.html": {
		local:   "static/index.html",
		size:    3678,
		modtime: 1513506450,
		compressed: `
H4sIAAAAAAAC/5wX247btvJ9v4LhgXIBImk3OcA5zUoqkrpBCzTNItk+BEWxGEm0NDFFsuTYG6PovxfU
xZZleeP0xRbnfh8yebR4/8Ptp5sfWU2NzC4S/8ckqCrlQnEPEFBmF4wxljSCgBU1WCco5b/dvg3/z8co
BY1I+QbFvdGWOCu0IqEo5fdYUp2WYoOFCNvDc4YKCUGGrgAp0qvochBFSFJkb27evf+VLcDVuQZbJnEH
7kgkqhWzQqYcC604q61YphycE+TiJWw8NMJCc0ZbI1KODVQi/hK21GMZHWNNZNyrOF5qRS6qtK6kAIMu
KnQTF859v4QG5Tb9oHNN+tV/Ly+f/+/ykncWONpK4WohiB9ZN8L1lpD4Ql7kxOZCN41WkUf8CyEtRc+c
xF3CklyX2+wiKXHDCgnOpdynA1AJO+gY4TyTRxzDQlR7lnm20ImCUCsmxZJGlFNqqSs9Qbck2FQ9CWtp
QmwqzpwtdvHJjQ+PURVnIMmnHVUFjS5Wc/KcAZU9Vrkz14vXH3968/71h0USt9BD2+ISNyPHJsfTflqs
au/oxUF8S6tNqe/VTHjzNZFWrPsLh2B/FFIUxG6xERZUJUYGzMkN+34K7y0YM5vGKelA0vr+CzhiLy/Z
ArZuHI4xlr3Tiupj7G2Njn0SYJnTbAl2T7Ezuv+YRLEV8SgMGe/s7OwSJRLk0teyXQs+mI/KrIm1v0OQ
GJYpX6Ik/10CQWgkFKLWshQ25W9bDFtqy96sHSrhHLuxuhDORVHEs84aFoazae4+e8A+mF6lV3Wi6KWG
En0perrhcNA5zvRNc6BgpHxQmbjCoqFxX/sB3In2k5bulhYacUeNkTP5bpEsCVJHQCLIOGtnQT9xX3lM
ic5I2N4IWwhFQRZc93EkrSWhSZ8kQdp/B9mTPsYddcqTIDUDZ8/nCGyHab+CbHDzIok7d77mGCoS1q6N
7yV34Fr9YhfCdd5OfJ79PKZO4vrFsCd8AY0yRPtNtYfZLKE68x2WxFS3h8Xagpe1A7xWStMIFJMdV8tE
bkLdZD3QE7QV+HQDliFDxQ48fMb+YsGxYcdzi8osCdID3t/xj4iwEY6gMYG3rTyfsew9DTL3bYywi8ic
ysMA9f7/PXYxiUdBSuI+U+eWx8rgUb17eBKkK4NY+orbq9qXzMqgv4Gwfel0HB4YZOxxU4Krr7uBNgjM
jZd3txd9BxtACTlKpC3PoijqR13AeowU+yKc9uMh88lF2HY2P21Dhz93WX1j9+Xm1DQxoIScmHViBrak
ky0zR5ebuQU92azt/Dyi6rJ7lbWmnJHDsxLXQpK4vpqx6nhxfUN6z05zn9tT2ma25wxovPIFAUo3VTOA
H3ZoZfCIs4VlZ0TjYGxMpRwis6/79cDtayg2KcE4fw/QqpBYrFJOuqqkWHS+Pn38n5ffXe9M8Kdn19Pa
xGk6Bql3btvkWu7uIktwbAkhqEqKsLvWJTE+1IBzHTi+xH7+cy3sNnwZvYiuogZV9LkNzMAzx+JfJHAv
nG5ECFKewUGiMRIIVXUGcf/seICwgVN2Zv4B9/TZ9djpuH90xN1j8uKfAAAA//8+MnyDXg4AAA==
`,
	},

	"/main.js": {
		local:   "static/main.js",
		size:    7060,
		modtime: 1514032039,
		compressed: `
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
ZxuUGwAA
`,
	},

	"/style.css": {
		local:   "static/style.css",
		size:    637,
		modtime: 1513506078,
		compressed: `
H4sIAAAAAAAC/4yO0WrDMAxF3/MVgjHYHhJS2JP7NUqs1MaeFBQ3XRn797HGpXiFJI++vvfoNJYS+jjB
dwUAYP00RrwaYGE6Vj9V1fQONeXvi7fJGTi07evxFjjyJ5cMfLTj15L0kVANdJLcEnTYh5PKmW3dSxQ1
8EKU2WH0EzQ4o4/Y+ejTFYp7d/zhhn/YNIPiJz2V7lZDFEwGIg2pWEnIk2enGfWtriUs77rTP+b7v7Vx
MpPuZVjUUBJ4U4BXDXinAq84nDmwXHiDkFsrLrmxy6ekPZx+AwAA//8NGTqTfQIAAA==
`,
	},

	"/": {
		isDir: true,
		local: "static",
	},
}
