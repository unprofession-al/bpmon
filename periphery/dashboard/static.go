// Code generated by "esc -o static.go -pkg dashboard -prefix static static"; DO NOT EDIT.

package dashboard

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/index.html": {
		local:   "static/index.html",
		size:    3678,
		modtime: 1513516127,
		compressed: `
H4sIAAAAAAAC/5wX247btvJ9v4LhgXIBImk3OcA5zUoqkrpBCzTNItk+BEWxGEm0NDFFsuTYG6PovxfU
xZZleeP0xRbnfh8yebR4/8Ptp5sfWU2NzC4S/8ckqCrlQnEPEFBmF4wxljSCgBU1WCco5b/dvg3/z8co
BY1I+QbFvdGWOCu0IqEo5fdYUp2WYoOFCNvDc4YKCUGGrgAp0qvochBFSFJkb27evf+VLcDVuQZbJnEH
7kgkqhWzQqYcC604q61YphycE+TiJWw8NMJCc0ZbI1KODVQi/hK21GMZHWNNZNyrOF5qRS6qtK6kAIMu
KnQTF859v4QG5Tb9oHNN+tV/Ly+f/+/ykncWONpK4WohiB9ZN8L1lpD4Ql7kxOZCN41WkUf8CyEtRc+c
xF3CklyX2+wiKXHDCgnOpdynA1AJO+gY4TyTRxzDQlR7lnm20ImCUCsmxZJGlFNqqSs9Qbck2FQ9CWtp
QmwqzpwtdvHJjQ+PURVnIMmnHVUFjS5Wc/KcAZU9Vrkz14vXH3968/71h0USt9BD2+ISNyPHJsfTflqs
au/oxUF8S6tNqe/VTHjzNZFWrPsLh2B/FFIUxG6xERZUJUYGzMkN+34K7y0YM5vGKelA0vr+CzhiLy/Z
ArZuHI4xlr3Tiupj7G2Njn0SYJnTbAl2T7Ezuv+YRLEV8SgMGe/s7OwSJRLk0teyXQs+mI/KrIm1v0OQ
GJYpX6Ik/10CQWgkFKLWshQ25W9bDFtqy96sHSrhHLuxuhDORVHEs84aFoazae4+e8A+mF6lV3Wi6KWG
En0perrhcNA5zvRNc6BgpHxQmbjCoqFxX/sB3In2k5bulhYacUeNkTP5bpEsCVJHQCLIOGtnQT9xX3lM
ic5I2N4IWwhFQRZc93EkrSWhSZ8kQdp/B9mTPsYddcqTIDUDZ8/nCGyHab+CbHDzIok7d77mGCoS1q6N
7yV34Fr9YhfCdd5OfJ79PKZO4vrFsCd8AY0yRPtNtYfZLKE68x2WxFS3h8Xagpe1A7xWStMIFJMdV8tE
bkLdZD3QE7QV+HQDliFDxQ48fMb+YsGxYcdzi8osCdID3t/xj4iwEY6gMYG3rTyfsew9DTL3bYywi8ic
ysMA9f7/PXYxiUdBSuI+U+eWx8rgUb17eBKkK4NY+orbq9qXzMqgv4Gwfel0HB4YZOxxU4Krr7uBNgjM
jZd3txd9BxtACTlKpC3PoijqR13AeowU+yKc9uMh88lF2HY2P21Dhz93WX1j9+Xm1DQxoIScmHViBrak
ky0zR5ebuQU92azt/Dyi6rJ7lbWmnJHDsxLXQpK4vpqx6nhxfUN6z05zn9tT2ma25wxovPIFAUo3VTOA
H3ZoZfCIs4VlZ0TjYGxMpRwis6/79cDtayg2KcE4fw/QqpBYrFJOuqqkWHS+Pn38n5ffXe9M8Kdn19Pa
xGk6Bql3btvkWu7uIktwbAkhqEqKsLvWJTE+1IBzHTi+xH7+cy3sNnwZvYiuogZV9LkNzMAzx+JfJHAv
nG5ECFKewUGiMRIIVXUGcf/seICwgVN2Zv4B9/TZ9djpuH90xN1j8uKfAAAA//8+MnyDXg4AAA==
`,
	},

	"/main.js": {
		local:   "static/main.js",
		size:    6645,
		modtime: 1513356783,
		compressed: `
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
`,
	},

	"/style.css": {
		local:   "static/style.css",
		size:    637,
		modtime: 1513516127,
		compressed: `
H4sIAAAAAAAC/4yO0WrDMAxF3/MVgjHYHhJS2JP7NUqs1MaeFBQ3XRn797HGpXiFJI++vvfoNJYS+jjB
dwUAYP00RrwaYGE6Vj9V1fQONeXvi7fJGTi07evxFjjyJ5cMfLTj15L0kVANdJLcEnTYh5PKmW3dSxQ1
8EKU2WH0EzQ4o4/Y+ejTFYp7d/zhhn/YNIPiJz2V7lZDFEwGIg2pWEnIk2enGfWtriUs77rTP+b7v7Vx
MpPuZVjUUBJ4U4BXDXinAq84nDmwXHiDkFsrLrmxy6ekPZx+AwAA//8NGTqTfQIAAA==
`,
	},

	"/": {
		isDir: true,
		local: "static",
	},
}
