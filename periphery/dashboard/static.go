// Code generated by "esc -o static.go -pkg dashboard -prefix static static"; DO NOT EDIT.

package dashboard

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/index.html": {
		local:   "static/index.html",
		size:    2667,
		modtime: 1512843167,
		compressed: `
H4sIAAAAAAAC/5xWTW/jNhA9r38FS0CLFqil9ANokUhcZOsu2kObxXZ76MmgpLE0a36VHKf1vy8oybHs
SF6nl8SeN29m+GaGZv7F6uGnj3+9/5m1pJVY5PEfU9I0BQfDowFkLRaMMZZrIMmqVvoAVPA/P75b/sgH
iJAUiLfvf3v4na1kaEsrfZ1nvbl3UWi2rPWwKXhL5MJtlm2soZA21jYKpMOQVlZnVQhvNlKj2hcfbGnJ
3n5/c/P1Dzc3nHlQBQ+0VxBaAOLjyOcYo72DghP8SzEkH1LLEIBCVlmtrUkj8D+CdB4DOc96hfLS1nux
yGt8ZJWSIRS8soYkGvCHHCMskiLw3LZEc6RM05YBKkJrmIINjTzPvZVt7BncuaBuBhfW+SxRN5wFXz3p
U7oojzMNZ1JRwbFC00htq+1UvOCkEa9NGdzd6v6PX94+3H9Y5VlnPa0tq/FxdLCzr/Pn9Ni00we1hsAQ
1EiyVLFVfgf8EAWN2xHr/i4HwRnWBd+govi5liSXTskKWqtq8AV/1yFsYz1rbSAjNaRpysV85f3HwXBs
c0wTw8/0UVlZY1Q3+h2+nAxDcMMcnCQYJT+kzEPl0dF4VOMS96HjttJ646WGNWmnJiaxA1meFIEkQSI4
68a74P9gTe1tRBz4CgwlIrkbRAskPRW8Z3lKxJNEedbX87nK0BB4v3OxvyelkReLV69yqkWeFIQaAknt
EpFnVI8QaYwlGdkHqNcm0q+tYevwmSrRnifF1iHW8ViT7ds6jKPBwq7srjgueko0JoK91rUM7V2/GIeI
pYsB18fYa/koUckSFdKeizfDxiRssCu4sCCn3NkboOs/ny+hx6/d0he2uHRzMwcKNBhiThpQZ+XNSF66
C8csXdeOYy96w2da8VL9X9CDq/owiD+V5eqLcuswnMftbFexx0sYLuh7nPNfx4ypyrt7eEIMOj4knmN+
GhiIYiUJ8ozay173TzfCvG9/P0xYp6vLKf6qn8l7SbQhWv8WODOeCnPVWo1/kj/9vQO/X36Xfpt+k2o0
6acQZ+fAmaIQaKckoWmucB6eRBcctZzLKtAgffnV3fgI2fAgyvqX5eK/AAAA//+VCUOQawoAAA==
`,
	},

	"/main.js": {
		local:   "static/main.js",
		size:    5436,
		modtime: 1512894176,
		compressed: `
H4sIAAAAAAAC/+xWUW/bNhB+dn7FVTVgajEkB8UGzIkzYEMHdAW6Yu1bEBi0dLIJySQnUna81v99ICXZ
tE2lSbZhKVA/yeTd8e67j8cvq3iimeDAONMkhE9nAAALluIHyTjHkoSXdqlPUpFUS+Q6jAQnMMhxU8nB
EAYvM1ZoLAdDaIPt4pjfipaQUk1hAn0yeGk/I0k5FoMmtPklgitRYFSIOekTvWAqjDTeaRKGB5FKhAlw
XMMfOH99J49shxCwwIlqDovUQqxJGNVZEm+ObXROl2jzrINmjKckiBZCabMTtMdcHjiWqKuSw4sSI41K
E2PqmGzDyMDZem3DyzP7UQia/vxemfXt2dmuD7vlJr1+NEf924ff35EgppLFM6niwIHalOiWwjIgNdwT
GMHnz9D+4VVRuP8rnmLGOKbHQPRJcJWyFSQFVWoy4EKzjCXUZlf37fp1WYoS1gtWIBRMacbnMKsU46gU
yFIkqBSqKIqu4pStroMWgohKiTz9KEhgiRCEUUZTfMNJoAqxdlu3BSwUenqUiIprmMDosAuZKIGY/Rw3
wDgc47InWsX1+fnlyYbxNckwDhMg9SnX8CqEn+CH0QjGcPH9CL6r/ZsWHrvPJEzgE8wkS8cmjyHMpGHD
2GZzk+PmFrb+ky2wMAG9lAUJZnJqPgITIDx16BNr/mVU63o8EWqWvV4h14rkuOkwefv+jW97e3b4tfVy
uIlu0LiXzHBuEfu/Of2LqIoUuNCQoU4WgDZ9y6tjasOgTRrOIRj8NzyXWCbINZ2jMqzaPo3uWVmPtB0B
Her2eiaA0lRX5oig4jkXax6cckGtmU4WxAaLMoZFqqLarz2z1+v1EqoQRmMnfq+3jy5yJ7DZmpVI88tD
74sub/4g9x+73BnHu3pO3R8lxYxWhe4Ks0fIrG/9U6BpHEwa9FvA0qq0hJs2Bp4hYoju9P2mPvnWpXrH
difz25/X73iI1lfa1OY3962eQ3c9cQxLmiOoqsT6kjIFK6bYrECPsVM+XMEouvAVE8cW6DrIdA/2KLrw
2G49a76QC62lGsdxIlKUyCMm4mRW0iQRsUQe//lXlc/9T4Yd+QYMHDd3adgiMm4/hman1OOGEJotUWm6
lF2vQbKgpd69Bvbf1Lq2z0LmfRWsoW8G7cdVMLVGzkDKqNJmINm2mw54brlhmG2GsbFTg3IudD0/J0cu
ztaLmrfmDe0yGUNwxa5vzNzdoG7jYnp7FbPr5qLZE5kFegfd2IzAJdUf2wVyhG04dJIcuwmfcqI+gGss
y0o2RdXYu4st+MwDfq9PXNMvNcG1VZ5m1OPF/+b6BoWZrrct3MdjYrd575AwEIjKsO5dtZxhSU4PCCMt
fmV3mJJXoZeAbpEQTOmKsoLOWMH0phXPotJPUBNWiDxUSZiz41wy9Sx1sinFqypQgVvBv68qHqoZrIlk
jpat9Vku2U7Y5pI9SdnmkrXXKJfscdr2gFu2v6cXp0PFOlp0CE8TtCdRDBqPoqNdsW7PWOu+ff8GgiZN
kzmI7FT/fpO/3+SvT/5+nfr1sSp9L/vc6dglAe+N/nyEIQTT3Xiy/7p04tcuSg6r/CcS5e8AAAD//wCV
Y388FQAA
`,
	},

	"/style.css": {
		local:   "static/style.css",
		size:    849,
		modtime: 1512894207,
		compressed: `
H4sIAAAAAAAC/4yS22rjMBCG7/MUA8vCLsQmTjbrRH0aHUbWYEUy9uTU0ncvPiStSGN6Z+b/vhl5pJyJ
PS4h745q+IS3BQCAjYGzM1LlWICK3rwM5YNsKwoZx0ZAsWouSVVF5ni4Be+LRf7QsaNXFFBsVr9HQDvZ
8gScybDr7T7sC24a/+/er26og1yeJHmpyBNfIWlxMz5PMKa5beUBH6DbIOujZAEeLSdWrCdFSV1XbTwG
k+noYyvgV2m0Lv8neJjj0e7Kcpvwx1CHeA4zzkZt7TpxKOCFOqZQzWiIozP8tXDxhO1z2lpr9/tBYKnu
15XcRp+5JbCZwkYaQ6ESsJv2zG7+3TBeOJOeqvBlzexQmucHK6TSez2SKporcCsCu0w78uZPNObvc1da
U2jZu9+oeMIw45o1brFI5/58hx8BAAD//10uZLNRAwAA
`,
	},

	"/": {
		isDir: true,
		local: "static",
	},
}
