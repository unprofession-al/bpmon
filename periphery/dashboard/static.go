// Code generated by "esc -o static.go -pkg dashboard -prefix static static"; DO NOT EDIT.

package dashboard

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/index.html": {
		local:   "static/index.html",
		size:    3678,
		modtime: 1514380703,
		compressed: `
H4sIAAAAAAAC/5wX247btvJ9v4LhgXIBImk3OcA5zUoqkrpBCzTNItk+BEWxGEm0NDFFsuTYG6PovxfU
xZZleeP0xRbnfh8yebR4/8Ptp5sfWU2NzC4S/8ckqCrlQnEPEFBmF4wxljSCgBU1WCco5b/dvg3/z8co
BY1I+QbFvdGWOCu0IqEo5fdYUp2WYoOFCNvDc4YKCUGGrgAp0qvochBFSFJkb27evf+VLcDVuQZbJnEH
7kgkqhWzQqYcC604q61YphycE+TiJWw8NMJCc0ZbI1KODVQi/hK21GMZHWNNZNyrOF5qRS6qtK6kAIMu
KnQTF859v4QG5Tb9oHNN+tV/Ly+f/+/ykncWONpK4WohiB9ZN8L1lpD4Ql7kxOZCN41WkUf8CyEtRc+c
xF3CklyX2+wiKXHDCgnOpdynA1AJO+gY4TyTRxzDQlR7lnm20ImCUCsmxZJGlFNqqSs9Qbck2FQ9CWtp
QmwqzpwtdvHJjQ+PURVnIMmnHVUFjS5Wc/KcAZU9Vrkz14vXH3968/71h0USt9BD2+ISNyPHJsfTflqs
au/oxUF8S6tNqe/VTHjzNZFWrPsLh2B/FFIUxG6xERZUJUYGzMkN+34K7y0YM5vGKelA0vr+CzhiLy/Z
ArZuHI4xlr3Tiupj7G2Njn0SYJnTbAl2T7Ezuv+YRLEV8SgMGe/s7OwSJRLk0teyXQs+mI/KrIm1v0OQ
GJYpX6Ik/10CQWgkFKLWshQ25W9bDFtqy96sHSrhHLuxuhDORVHEs84aFoazae4+e8A+mF6lV3Wi6KWG
En0perrhcNA5zvRNc6BgpHxQmbjCoqFxX/sB3In2k5bulhYacUeNkTP5bpEsCVJHQCLIOGtnQT9xX3lM
ic5I2N4IWwhFQRZc93EkrSWhSZ8kQdp/B9mTPsYddcqTIDUDZ8/nCGyHab+CbHDzIok7d77mGCoS1q6N
7yV34Fr9YhfCdd5OfJ79PKZO4vrFsCd8AY0yRPtNtYfZLKE68x2WxFS3h8Xagpe1A7xWStMIFJMdV8tE
bkLdZD3QE7QV+HQDliFDxQ48fMb+YsGxYcdzi8osCdID3t/xj4iwEY6gMYG3rTyfsew9DTL3bYywi8ic
ysMA9f7/PXYxiUdBSuI+U+eWx8rgUb17eBKkK4NY+orbq9qXzMqgv4Gwfel0HB4YZOxxU4Krr7uBNgjM
jZd3txd9BxtACTlKpC3PoijqR13AeowU+yKc9uMh88lF2HY2P21Dhz93WX1j9+Xm1DQxoIScmHViBrak
ky0zR5ebuQU92azt/Dyi6rJ7lbWmnJHDsxLXQpK4vpqx6nhxfUN6z05zn9tT2ma25wxovPIFAUo3VTOA
H3ZoZfCIs4VlZ0TjYGxMpRwis6/79cDtayg2KcE4fw/QqpBYrFJOuqqkWHS+Pn38n5ffXe9M8Kdn19Pa
xGk6Bql3btvkWu7uIktwbAkhqEqKsLvWJTE+1IBzHTi+xH7+cy3sNnwZvYiuogZV9LkNzMAzx+JfJHAv
nG5ECFKewUGiMRIIVXUGcf/seICwgVN2Zv4B9/TZ9djpuH90xN1j8uKfAAAA//8+MnyDXg4AAA==
`,
	},

	"/main.js": {
		local:   "static/main.js",
		size:    7284,
		modtime: 1514555107,
		compressed: `
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
AP//VNyglXQcAAA=
`,
	},

	"/style.css": {
		local:   "static/style.css",
		size:    637,
		modtime: 1514380703,
		compressed: `
H4sIAAAAAAAC/4yO0WrDMAxF3/MVgjHYHhJS2JP7NUqs1MaeFBQ3XRn797HGpXiFJI++vvfoNJYS+jjB
dwUAYP00RrwaYGE6Vj9V1fQONeXvi7fJGTi07evxFjjyJ5cMfLTj15L0kVANdJLcEnTYh5PKmW3dSxQ1
8EKU2WH0EzQ4o4/Y+ejTFYp7d/zhhn/YNIPiJz2V7lZDFEwGIg2pWEnIk2enGfWtriUs77rTP+b7v7Vx
MpPuZVjUUBJ4U4BXDXinAq84nDmwXHiDkFsrLrmxy6ekPZx+AwAA//8NGTqTfQIAAA==
`,
	},

	"/": {
		isDir: true,
		local: "static",
	},
}
