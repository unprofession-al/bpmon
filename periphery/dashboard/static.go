// Code generated by "esc -o static.go -pkg dashboard -prefix static static"; DO NOT EDIT.

package dashboard

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/index.html": {
		local:   "static/index.html",
		size:    2667,
		modtime: 1512843167,
		compressed: `
H4sIAAAAAAAC/5xWTW/jNhA9r38FS0CLFqil9ANokUhcZOsu2kObxXZ76MmgpLE0a36VHKf1vy8oybHs
SF6nl8SeN29m+GaGZv7F6uGnj3+9/5m1pJVY5PEfU9I0BQfDowFkLRaMMZZrIMmqVvoAVPA/P75b/sgH
iJAUiLfvf3v4na1kaEsrfZ1nvbl3UWi2rPWwKXhL5MJtlm2soZA21jYKpMOQVlZnVQhvNlKj2hcfbGnJ
3n5/c/P1Dzc3nHlQBQ+0VxBaAOLjyOcYo72DghP8SzEkH1LLEIBCVlmtrUkj8D+CdB4DOc96hfLS1nux
yGt8ZJWSIRS8soYkGvCHHCMskiLw3LZEc6RM05YBKkJrmIINjTzPvZVt7BncuaBuBhfW+SxRN5wFXz3p
U7oojzMNZ1JRwbFC00htq+1UvOCkEa9NGdzd6v6PX94+3H9Y5VlnPa0tq/FxdLCzr/Pn9Ni00we1hsAQ
1EiyVLFVfgf8EAWN2xHr/i4HwRnWBd+govi5liSXTskKWqtq8AV/1yFsYz1rbSAjNaRpysV85f3HwXBs
c0wTw8/0UVlZY1Q3+h2+nAxDcMMcnCQYJT+kzEPl0dF4VOMS96HjttJ646WGNWmnJiaxA1meFIEkQSI4
68a74P9gTe1tRBz4CgwlIrkbRAskPRW8Z3lKxJNEedbX87nK0BB4v3OxvyelkReLV69yqkWeFIQaAknt
EpFnVI8QaYwlGdkHqNcm0q+tYevwmSrRnifF1iHW8ViT7ds6jKPBwq7srjgueko0JoK91rUM7V2/GIeI
pYsB18fYa/koUckSFdKeizfDxiRssCu4sCCn3NkboOs/ny+hx6/d0he2uHRzMwcKNBhiThpQZ+XNSF66
C8csXdeOYy96w2da8VL9X9CDq/owiD+V5eqLcuswnMftbFexx0sYLuh7nPNfx4ypyrt7eEIMOj4knmN+
GhiIYiUJ8ozay173TzfCvG9/P0xYp6vLKf6qn8l7SbQhWv8WODOeCnPVWo1/kj/9vQO/X36Xfpt+k2o0
6acQZ+fAmaIQaKckoWmucB6eRBcctZzLKtAgffnV3fgI2fAgyvqX5eK/AAAA//+VCUOQawoAAA==
`,
	},

	"/main.js": {
		local:   "static/main.js",
		size:    5194,
		modtime: 1512841258,
		compressed: `
H4sIAAAAAAAC/+xWUW/bNhB+dn7FlTVgajFkF8UGzIkzYEMGZAW6YO1bEBi0dIoJySRBUnaM1v99IGUp
tC2labZhLRA/WeTdx+N33x0vK0ViuRTABbc0gk8nAAALnuIHxYVATaMzv9SnqUzKJQobxVJQGOS4KdVg
CIPXGS8s6sEQarAGx/1WTEPKLIMp9Ongtf8bKyawGOyg3S+RwsgC40Le0T61C26i2OK9pVG0h6QRpiBw
DX/h3eW9OrAdAuEkQHWHxWYh1zSKqyhpa4w1umBL9HFWoBkXKSXxQhrrdkh9zNmeo0ZbagGvNMYWjaXO
NDDZRrGjs/baRmcn/k8hWfrrtXHr25OTJg/N8i68fnyH9o8Pf76nZMQUH82VGZGAanfF8Co8A1rRPYUx
fP4M9YcoiyL8LkWKGReYHhLRp+Q85StICmbMdCCk5RlPmI+uytvFpdZSw3rBC4SCG8vFHcxLwwUaA0rL
BI1BE8fx+SjlqwtSUxAzpVCkHyUlXggkijOW4pWgxBRyHaZuC1gYbMlRIkthYQrj/SxkUgN1+zlugAs4
5OVBaKWwp6dnRxvO1wXDBUyBVqdcwNsIfoGfxmOYwJsfx/BD5b9L4aH7XMEUPsFc8XTi4hjCXDk1THw0
NzlubmHbfrInFqZgl6qgZK5m7g9xANGxQ5968y+zWt2nBaFS2eUKhTU0x02Hybvrq7bt7cn+v22rhnfo
jo1HxQynnrH/W9O/ybJIQUgLGdpkAejD97o6lDYM6qDhFMjgv9G5Qp2gsOwOjVPV9nlyz3TV0hoBBtLt
9RyAscyW7ghSilzItSDHWjBrbpMF9WBxxrFITVz51Wf2er1ewgzCeBLg93oP6DIPgN3WXCPLz/a933R5
iye5/9zlzgXeV33qcZQUM1YWtgvmgSG3vj3uAk6pQeJuKtfbUKsd253SrX+tfoddsKpJF1y7edvqKezl
NS21r4vZzraj12W+1TkMnOw0NKzhJ48jDp29bqwsX6KxbKm6emOyYNo2vdF/zbxr3SSz1h7pDdsq8qF4
ycwbBeWZMWNdeXoOXTZbNO/S9calydn4GmJCSFt1k+mBS7D1qhKBe1G6TCZAzvnFjetCG7Q1Lqa35yN+
sZOdP5F7+hvqJq4hLJn9WC/QA26jYRDkJAx4e0RddYCwqHWpdpequA8Xa/J5C/m9Pg1Nv5SE0Na0JKMq
tvYXqK3qXK+5rek+rLlm89GKcxTI0qnufbmco6bHB0Sxlb/ze0zp26hVgOElgczYivGCzXnB7aYeJWVp
n/G2+mf5qe+qO3uUK26+yanRXaX1jUUD4Q3+/Tf2qS+oN1E8mOyqaSVXvBnzcsWfNeflitdllCv+dZPe
nrZ8fo8Lp2OmCyazITxvvDtCcWx8lRz9inf7hie/d9dXQHZhushBZsfT4Msw+DIMvgyD+93xOx8Mgcya
9uS/uubE730o2b/lPxlR/g4AAP//vfFaCkoUAAA=
`,
	},

	"/style.css": {
		local:   "static/style.css",
		size:    849,
		modtime: 1512839132,
		compressed: `
H4sIAAAAAAAC/4yS22rjMBCG7/MUA8vCLsQmTjbrRH0aHUbWYEUy9uTU0ncvPiStSGN6Z+b/vhl5pJyJ
PS4h745q+IS3BQCAjYGzM1LlWICK3rwM5YNsKwoZx0ZAsWouSVVF5ni4Be+LRf7QsaNXFFBsVr9HQDvZ
8gScybDr7T7sC24a/+/er26og1yeJHmpyBNfIWlxMz5PMKa5beUBH6DbIOujZAEeLSdWrCdFSV1XbTwG
k+noYyvgV2m0Lv8neJjj0e7Kcpvwx1CHeA4zzkZt7TpxKOCFOqZQzWiIozP8tXDxhO1z2lpr9/tBYKnu
15XcRp+5JbCZwkYaQ6ESsJv2zG7+3TBeOJOeqvBlzexQmucHK6TSez2SKporcCsCu0w78uZPNObvc1da
U2jZu9+oeMIw45o1brFI5/58hx8BAAD//10uZLNRAwAA
`,
	},

	"/": {
		isDir: true,
		local: "static",
	},
}
